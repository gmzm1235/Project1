Index: src/main/java/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import abstractclasses.Protokoll;\nimport database.MongoDBConnectionHandler;\nimport de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity;\nimport de.tudarmstadt.ukp.dkpro.core.api.segmentation.type.Sentence;\nimport de.tudarmstadt.ukp.dkpro.core.api.segmentation.type.Token;\nimport implementation.*;\nimport database.*;\nimport org.apache.uima.UIMAException;\nimport org.apache.uima.analysis_engine.AnalysisEngine;\nimport org.apache.uima.cas.CAS;\nimport org.apache.uima.cas.impl.XCASSerializer;\nimport org.apache.uima.fit.factory.AggregateBuilder;\nimport org.apache.uima.fit.factory.JCasFactory;\nimport org.apache.uima.fit.pipeline.SimplePipeline;\nimport org.apache.uima.fit.util.JCasUtil;\nimport org.apache.uima.jcas.JCas;\nimport org.bson.Document;\nimport org.hucompute.textimager.uima.gervader.GerVaderSentiment;\nimport org.hucompute.textimager.uima.spacy.SpaCyMultiTagger3;\nimport org.hucompute.textimager.uima.type.Sentiment;\nimport org.xml.sax.SAXException;\n\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.util.*;\n\nimport static org.apache.uima.fit.factory.AnalysisEngineFactory.createEngineDescription;\n\n\n/***\n\n * die Location Path von den xml files wird von dem User in dem Class Main angefordert und\n * um dieser Folder zu lesen wird Class Main mithilfe der implementation.Plenarsitzung Class gearbeitet.\n * Die Methode, die den angeforderten Job ausführt, wird basierend auf der bereitgestellten Eingabe aufgerufen.\n * Nach Eingabe des Benutzers kann Main auch mit MongoDB verbunden und\n * Operationen(Delete, Insert, Update, Read) mit MongoDB ausgeführt werden.\n * Wenn der User einen falschen Input eingibt, dann wird von dem User noch Mal neue Input angefordert\n *\n *\n */\npublic class Main {\n    public static Plenarsitzung plenarsitzung;\n    public static Scanner input;\n    public static MongoDBConnectionHandler db;\n\n    public static void main(String[] args) {\n        try {\n            db = new MongoDBConnectionHandler();\n            //MyJCas();\n\n            //System.exit(0);\n            input = new Scanner(System.in);\n            String folderlocation = \"xmlfiles\";\n            System.out.println(\"Enter xmlfilespath : \");\n            //folderlocation = input.nextLine();\n            //plenarsitzung = new Plenarsitzung(folderlocation);\n            plenarsitzung = new Plenarsitzung(\"/home/gbatil/Downloads/xmlfiles\");\n\n            //plenarsitzung = new Plenarsitzung(folderlocation);\n            System.out.println(\"reading from Files...\");\n            plenarsitzung.build();\n            int choice;\n            while (true) {\n                System.out.println(\"Enter 1 : Redners\");\n                System.out.println(\"Enter 2 : Abgeordnete\");\n                System.out.println(\"Enter 3 : Fraktion Redners\");\n                System.out.println(\"Enter 4 : Protokoll Tagesordunungpunkttexts\");\n                System.out.println(\"Enter 5 : MongoDB test\");\n                System.out.println(\"Enter 6 : MongoDB insert all collection\");\n                System.out.println(\"Enter 7 : MongoDB remove all collection\");\n                System.out.println(\"Enter 8 : Show MongoDB Protocol\");\n                System.out.println(\"Enter 9 : CasObjeckt + Pipeline\");\n                System.out.println(\"Enter 10 : Exit\");\n                System.out.println();\n                System.out.print(\"Enter your choice : \");\n                choice = input.nextInt();\n                input.nextLine();\n                if (choice == 1) {\n                    printRedners();\n                }\n                else if (choice == 2) {\n                    printAbgeordnete();\n                }\n                else if (choice == 3) {\n                    printFraktionRedners();\n                }\n                else if (choice == 4) {\n                    printProtokollTagesordunungpunkttexts();\n                }\n                else if (choice == 5) {\n                    MongodbTest();\n                }\n                else if (choice == 6) {\n                    MongodbInsertAllCollections();\n                }\n                else if (choice == 7) {\n                    MongodbDeleteAllCollections();\n                }\n                else if (choice == 8) {\n                    MongoShowProtocol();\n                    //MongoShowRedner();\n                }\n                else if (choice == 9) {\n                    MyJCas();\n                }\n\n                else if (choice == 10){\n                    break;\n                }\n                else {\n                    System.out.println(\"InValid Choice\");\n                }\n\n            }\n\n        } catch (Exception exp) {\n            //System.out.println(exp.getClass().getName() +\" : \"+ exp.getMessage());\n            exp.printStackTrace();\n        }\n    }\n\n    /***\n     * dieser Methode wird darstellt, um die Redner auszudrucken\n     */\n    public static void printRedners() {\n        plenarsitzung.printAllRedners();\n\n    }\n\n    /***\n     * dieser Methode wird darstellt, um die Abgeordnete auszudrucken\n     */\n    public static void printAbgeordnete() {\n        plenarsitzung.printAllAbgeordnete();\n\n    }\n\n    /***\n     * die Methode wird Informationen darüber, welcher Sprecher zu welcher Partei gehört geprint\n     */\n    public static void printFraktionRedners() {\n        plenarsitzung.printAllFraktionRedners();\n\n    }\n\n    /***\n     * der Methode, der der Text von einem gewählten Tagesordnungspunkt ausgedruckt wird.\n     */\n    public static void printProtokollTagesordunungpunkttexts() {\n        String situngsnumber;\n        String tagesornungspunktnumber;\n        System.out.println(\"Enter situngsnumber : \");\n        situngsnumber = input.nextLine();\n        System.out.println(\"Enter tagesornungspunktnumber : \");\n        tagesornungspunktnumber = input.nextLine();\n        plenarsitzung.printProtokollTagesordnungspunkt(situngsnumber, tagesornungspunktnumber.trim());\n\n    }\n\n    /***\n     * die Methode wird  das Erstellen,\n     * Lesen, Updaten und Löschen von Dokumenten in der MongoDB getestet.\n     */\n    public static void MongodbTest(){\n\n        Redner_MonngoDB_File_Impl rmongo = new Redner_MonngoDB_File_Impl(db);\n        Protokoll_MongoDB_Impl pmongo = new Protokoll_MongoDB_Impl(db);\n        System.out.println(\"Test über readRedner :\");\n        System.out.println(\"Redner ( 11000616 redenid ) Informationen :\");\n        Redner r = rmongo.readRedner(\"11000616\");\n        if (r!=null){\n            System.out.println(r.getId()+\" \"+r.getTitel()+\" \"+r.getVorname()+\" \"+ r.getNachname());\n        }\n        else {\n            System.out.println(\"der Redner existiert nicht\");\n        }\n        System.out.println(\"Test über deleteRedner :\");\n        System.out.println(\"Löscht Redner rednerid : 11000616\");\n        long DeleteCount = rmongo.deleteRedner(\"11000616\");\n        if(DeleteCount > 0) {\n            System.out.println(DeleteCount + \" der Eintrag Redner wird gelöscht..........\");\n        }\n        else {\n            System.out.println(DeleteCount + \" 11000616 id Eintrag existiert nicht\");\n        }\n        System.out.println(\"Test über Update redner : \");\n        System.out.println(\" Bsp : Wir aktualisieren nur die Titel \");\n\n\n        r= new Redner();\n        r.setId(\"11001938\");\n        r.setTitel(\"Dr.\");\n        r.setVorname(\"Wolfgang\");\n        r.setNachname(\"Schäuble\");\n        rmongo.updateRedner(r);\n        Redner r2 = rmongo.readRedner(\"11001938\");\n        if (r2!=null){\n            System.out.println(r2.getId()+\" \"+r2.getTitel()+\" \"+r2.getVorname()+\" \"+ r2.getNachname());\n        }\n        else {\n            System.out.println(\"der Eintrag existiert nicht.........\");\n        }\n\n        System.out.println(\"Test über Delete Protocol\");\n        System.out.println(\"Löscht 221 Protocol\");\n        DeleteCount = pmongo.deleteProtocol(\"221\");\n        if(DeleteCount > 0) {\n            System.out.println(DeleteCount + \" 221 Protokoll wird gelöscht......\");\n        }\n        else {\n            System.out.println(DeleteCount + \" 221 Protokoll existiert nicht....\");\n        }\n        try {\n            System.out.println(\"Test über Read Protocol \");\n            System.out.println(\"Read 197 Protokoll\");\n            Protokoll prt = pmongo.readProtocol(\"197\");\n            if (prt!=null){\n                PrintProtocol(prt);\n            }\n            else {\n                System.out.println(\"197 Protokoll existiert nicht....\");\n            }\n\n\n        }\n        catch (Exception exp) {\n            exp.printStackTrace();\n        }\n\n\n\n\n\n\n\n\n    }\n\n\n    /***\n     * Diese Methode wird die Redner aus der MongoDB Databank gelesen und rufen wir PrintRedner Methode auf ,\n     * um die Redner auszudrucken.\n     *\n     * @throws Exception\n     */\n    public static void MongoShowRedner() throws Exception {\n        ArrayList<Redner> redners = new ArrayList<>();\n\n        Redner_MonngoDB_File_Impl rmongo = new Redner_MonngoDB_File_Impl(db);\n        redners = rmongo.readAllRednersfromMongo();\n        for(Redner r: redners){\n            PrintRedner(r);\n        }\n\n    }\n\n    /***\n     * Diese Methode wird die Protocols aus der MongoDB Databank gelesen und ausgedruckt.\n     * @throws Exception\n     */\n    public static void MongoShowProtocol() throws Exception {\n        System.out.println(\"Enter sitzungsnumber : \");\n        String sitzungsnumber = input.nextLine();\n        Protokoll_MongoDB_Impl pmongo = new Protokoll_MongoDB_Impl(db);\n        Protokoll p = pmongo.readProtocol(sitzungsnumber);\n        PrintProtocol(p);\n    }\n\n    /***\n     * Diese Methode ist eine  HilfsMethode. Wir verwenden sie, um die Redner auszudrucken.\n     * @param r\n     */\n    public static void PrintRedner(Redner r) {\n        if(r!=null) {\n            System.out.println(r.getId()+ \" \"+ r.getTitel()+ \" \"+ r.getVorname()+\" \"+ r.getNachname());\n        }\n    }\n\n    /***\n     * Diese Methode ist eine HilfsMethode. Wir verwenden sie, um die Protocols auszudrucken.\n     * @param p\n     */\n    public static void PrintProtocol(Protokoll p) {\n        if(p!=null) {\n            System.out.println(p.getSitzungsnumber()+ \" \"+p.getTitel()+ \" \"+ p.getDatum());\n            for (Tagesordnungspunkt t : p.getTagesordnungspunkts()) {\n                System.out.println(t.getTopid());\n                if (t.getReden() != null) {\n                    for(Rede r : t.getReden()) {\n                        if(r.getRedner() != null){\n                            System.out.println(r.getId()+ \" Redner : \"+ r.getRedner().getId()+ \" \"+ r.getRedner().getTitel()+ \" \"+ r.getRedner().getVorname()+ \" \"+ r.getRedner().getNachname());\n                        }\n                        else {\n                            System.out.println(r.getId());\n                        }\n\n                        for(String s: r.getRedetext()){\n                            System.out.println(s);\n                        }\n                        System.out.println(\"---------------------------------------\");\n                    }\n                }\n\n                System.out.println(\"+++++++++++++++++++++++++++++++++++++++++++\");\n            }\n        }\n\n    }\n\n    /***\n     * diese Methode wird sich von CLass Redner_MonngoDB_File_Impl und CLass Protokoll_MongoDB_Impl zu Nutze gemacht.\n     * Sie wird die Collections (Redner und Protokolle) zu MongoDB Databank eingefügt.\n     */\n\n    public static void MongodbInsertAllCollections(){\n        Redner_MonngoDB_File_Impl rmongo = new Redner_MonngoDB_File_Impl(db);\n        Protokoll_MongoDB_Impl pmongo = new Protokoll_MongoDB_Impl(db);\n        db.CreateCollections();\n        HashMap<String, Redner> rednerMap = plenarsitzung.getRednerMap();\n        Iterator<String> itr = rednerMap.keySet().iterator();\n        String rednerid;\n        Redner redner;\n        while (itr.hasNext()){\n            rednerid = itr.next();\n            redner = rednerMap.get(rednerid);\n            rmongo.insertRedner(redner);\n        }\n        System.out.println(\"die Redner werden hinzugefügt......\");\n        ArrayList<Protokoll> plist = plenarsitzung.getProtokollList();\n        for (int i = 0;i<plist.size();i++){\n            try {\n                System.out.println((i+1)+ \" Protocol : \"+ plist.get(i).getSitzungsnumber());\n                pmongo.insertProtocol(plist.get(i));\n            }\n           catch (Exception exp){\n               System.out.println(\" Error in Protocol : \"+ plist.get(i).getSitzungsnumber());\n                exp.printStackTrace();\n           }\n\n        }\n        System.out.println(\"die Protokolle werden hinzugefügt......\");\n\n\n\n\n\n\n    }\n\n    /***\n     * diese Methode löscht die Collections aus der Databank.\n     */\n    public static void MongodbDeleteAllCollections(){\n        db.DeleteCollections();\n\n\n\n    }\n\n    /***\n     * In der Methode werden die Protocols mithilfe der Methode readAllProtocolsfromMongo aus der KLasse Protokoll_MongoDB_Impl gelesen.\n     * Dann entsteht eine CAS Objects aus jeder Redetext aus der Protokolle, danach werden Sie in der jCaslist eingefügt.\n     *  Mit der for-Schleife können Inhalte der jCaslist durchlaufen. Jede CAS Objects aus der Liste wird mit Pipline ausgepackt.\n     * @throws UIMAException\n     */\n    public static void MyJCas( ) throws UIMAException{\n        Protokoll_MongoDB_Impl pmongo = new Protokoll_MongoDB_Impl(db);\n        ArrayList<Protokoll> protokolls = pmongo.readAllProtocolsfromMongo();\n        System.out.println(\"die Protokolle werden hinzugefügt......\");\n        StringBuilder sb;\n        JCas jCas;\n        int count = 0;\n        boolean exit = false;\n        ArrayList<RedeJcas> redejcaslist = new ArrayList<>();\n        RedeJcas rj;\n\n        for(Protokoll p: protokolls){\n            for (Tagesordnungspunkt t: p.getTagesordnungspunkts()){\n                for(Rede r : t.getReden()){\n\n                    count++;\n                    sb = new StringBuilder();\n                    for(String s: r.getRedetext()){\n                        sb.append(s);\n                    }\n                    jCas = toCas(sb.toString());\n                    //System.out.println(sb.toString());\n                    rj = new RedeJcas(r,jCas);\n                    redejcaslist.add(rj);\n                    if(count> 3){\n                        //exit = true; //tüm redeleri jcas a cevirmek icin bu satiri commentle\n                        break;\n                    }\n\n                }\n                //if(exit){\n                    //break;\n                //}\n            }\n            //if(exit){\n                //break;\n            //}\n        }\n        System.out.println(\"redecount : \"+count);\n\n        AggregateBuilder builder = new AggregateBuilder();\n        builder.add(createEngineDescription(SpaCyMultiTagger3.class,\n                SpaCyMultiTagger3.PARAM_REST_ENDPOINT, \"http://spacy.prg2021.texttechnologylab.org\"));\n        builder.add(createEngineDescription(GerVaderSentiment.class,\n                GerVaderSentiment.PARAM_REST_ENDPOINT, \"http://gervader.prg2021.texttechnologylab.org\",\n                GerVaderSentiment.PARAM_SELECTION , \"text,de.tudarmstadt.ukp.dkpro.core.api.segmentation.type.Sentence\"));\n        AnalysisEngine pAE = builder.createAggregate();\n\n        JCas_MongoDB_Impl jmongo = new JCas_MongoDB_Impl(db);\n\n        int i = 1;\n        for(RedeJcas rjs : redejcaslist) {\n            System.out.println(\"######################################    \"+ i + \"   ###########################################\");\n            SimplePipeline.runPipeline(rjs.getJcas(), pAE);\n            //PrintJCasInfo(j);\n            //System.out.println(getXml(j));\n            jmongo.InsertJcasXml(getXml(rjs.getJcas()),rjs.getRede());\n            i++;\n            //break;\n        }\n\n\n\n\n    }\n\n    /***\n     * Dank des Pipelines wird jede CAS Obeckt dem Xml-String serialisiert.\n     * @param jCas\n     * @return\n     */\n    public static String getXml(JCas jCas){\n        CAS cas = jCas.getCas();\n        ByteArrayOutputStream outTmp = new ByteArrayOutputStream();\n        try {\n            XCASSerializer.serialize(cas, outTmp);\n        } catch (IOException |SAXException e) {\n            e.printStackTrace();\n        }\n        String xml = outTmp.toString();\n        return xml;\n\n    }\n\n    /***\n     * die Methode JCAS wird toCas Methode erweitert.\n     * Hier erstellen wir also der Text aus Redetext aus der Databank.\n     * @param text\n     * @return\n     * @throws UIMAException\n     */\n    public static JCas toCas(String text) throws UIMAException{\n        return JCasFactory.createText(text, \"de\");\n    }\n\n    /***\n     * Diese Methode erstellt aus der JCas Object Sentence, Tokens, NameEntity und Sentiment.\n     * @param jCas\n     */\n    public static void PrintJCasInfo(JCas jCas) {\n        Collection<Sentence> sentences = JCasUtil.select(jCas, Sentence.class);\n\n        for (Sentence sentence: sentences) {\n            System.out.println(\"Sentence :\" + sentence.getCoveredText());\n\n            Collection<Token> tokens = JCasUtil.selectCovered(Token.class, sentence);\n\n            for(Token token : JCasUtil.select(jCas, Token.class)) {\n                System.out.println(\"Tokens : \" + token.getCoveredText());\n                System.out.println(token.getPosValue());\n            }\n\n            for(NamedEntity entity : JCasUtil.select(jCas, NamedEntity.class)) {\n                System.out.println(\"Entity:  \"+ entity.getCoveredText()+ \" Value : \"+ entity.getValue());\n                if(entity.getValue().equals(\"PER\")) {\n                    System.out.println(\"Person\" + entity.getCoveredText() );\n                }\n                else {\n                    System.out.println(\"Location : \"+ entity.getCoveredText());\n                }\n            }\n        }\n        for(Sentence sentence : JCasUtil.select(jCas, Sentence.class)) {\n            System.out.println(sentence.getCoveredText());\n            for (Sentiment sentiment :  JCasUtil.selectCovered(Sentiment.class, sentence)) {\n                System.out.println(\"Sentiment : \"+ sentiment.getSentiment());\n            }\n        }\n\n    }\n\n\n\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Main.java b/src/main/java/Main.java
--- a/src/main/java/Main.java	(revision a5e43dbcab7dc351809916f4dafa3288433329b8)
+++ b/src/main/java/Main.java	(date 1639678442578)
@@ -14,6 +14,7 @@
 import org.apache.uima.fit.pipeline.SimplePipeline;
 import org.apache.uima.fit.util.JCasUtil;
 import org.apache.uima.jcas.JCas;
+import org.apache.uima.resource.ResourceInitializationException;
 import org.bson.Document;
 import org.hucompute.textimager.uima.gervader.GerVaderSentiment;
 import org.hucompute.textimager.uima.spacy.SpaCyMultiTagger3;
@@ -47,21 +48,11 @@
     public static void main(String[] args) {
         try {
             db = new MongoDBConnectionHandler();
-            //MyJCas();
-
-            //System.exit(0);
+            Thread.sleep(500);
             input = new Scanner(System.in);
-            String folderlocation = "xmlfiles";
-            System.out.println("Enter xmlfilespath : ");
-            //folderlocation = input.nextLine();
-            //plenarsitzung = new Plenarsitzung(folderlocation);
-            plenarsitzung = new Plenarsitzung("/home/gbatil/Downloads/xmlfiles");
-
-            //plenarsitzung = new Plenarsitzung(folderlocation);
-            System.out.println("reading from Files...");
-            plenarsitzung.build();
             int choice;
             while (true) {
+                System.out.println("Enter 0 : Read all Xml Files");
                 System.out.println("Enter 1 : Redners");
                 System.out.println("Enter 2 : Abgeordnete");
                 System.out.println("Enter 3 : Fraktion Redners");
@@ -76,7 +67,18 @@
                 System.out.print("Enter your choice : ");
                 choice = input.nextInt();
                 input.nextLine();
-                if (choice == 1) {
+                if (choice == 0) {
+                    String folderlocation = "xmlfiles";
+                    System.out.println("Enter xmlfilespath : ");
+                    folderlocation = input.nextLine();
+                    plenarsitzung = new Plenarsitzung(folderlocation);
+                    //plenarsitzung = new Plenarsitzung("/home/gbatil/Downloads/xmlfiles");
+
+                    //plenarsitzung = new Plenarsitzung(folderlocation);
+                    System.out.println("reading from Files...");
+                    plenarsitzung.build();
+                }
+                else if (choice == 1) {
                     printRedners();
                 }
                 else if (choice == 2) {
@@ -364,9 +366,10 @@
      *  Mit der for-Schleife können Inhalte der jCaslist durchlaufen. Jede CAS Objects aus der Liste wird mit Pipline ausgepackt.
      * @throws UIMAException
      */
-    public static void MyJCas( ) throws UIMAException{
+    public static void MyJCas( ) throws UIMAException {
         Protokoll_MongoDB_Impl pmongo = new Protokoll_MongoDB_Impl(db);
-        ArrayList<Protokoll> protokolls = pmongo.readAllProtocolsfromMongo();
+        System.out.println("Reading sitzungsnumbers.......");
+        ArrayList<String> sitzungsnumbers = pmongo.readAllProtocolssitzungsnumberfromMongo();
         System.out.println("die Protokolle werden hinzugefügt......");
         StringBuilder sb;
         JCas jCas;
@@ -375,44 +378,60 @@
         ArrayList<RedeJcas> redejcaslist = new ArrayList<>();
         RedeJcas rj;
 
-        for(Protokoll p: protokolls){
-            for (Tagesordnungspunkt t: p.getTagesordnungspunkts()){
-                for(Rede r : t.getReden()){
+        AggregateBuilder builder = new AggregateBuilder();
+        builder.add(createEngineDescription(SpaCyMultiTagger3.class,
+                SpaCyMultiTagger3.PARAM_REST_ENDPOINT, "http://spacy.prg2021.texttechnologylab.org"));
+        builder.add(createEngineDescription(GerVaderSentiment.class,
+                GerVaderSentiment.PARAM_REST_ENDPOINT, "http://gervader.prg2021.texttechnologylab.org",
+                GerVaderSentiment.PARAM_SELECTION , "text,de.tudarmstadt.ukp.dkpro.core.api.segmentation.type.Sentence"));
+        AnalysisEngine pAE = builder.createAggregate();
+
+        JCas_MongoDB_Impl jmongo = new JCas_MongoDB_Impl(db);
+        Protokoll p;
+        ArrayList<String> errorlist = new ArrayList<>();
+
+        int j = 0;
+        for(String sitzungsnumber: sitzungsnumbers){
+            j++;
+            try {
+                System.out.println(j+"  Reading Protocol sitzungsnumber : " + sitzungsnumber);
+                p = pmongo.readProtocol(sitzungsnumber);
+                System.out.println(j +"  Success Protocol sitzungsnumber : " + sitzungsnumber);
+                for (Tagesordnungspunkt t: p.getTagesordnungspunkts()){
+                    for(Rede r : t.getReden()){
 
-                    count++;
-                    sb = new StringBuilder();
-                    for(String s: r.getRedetext()){
-                        sb.append(s);
-                    }
-                    jCas = toCas(sb.toString());
-                    //System.out.println(sb.toString());
-                    rj = new RedeJcas(r,jCas);
-                    redejcaslist.add(rj);
-                    if(count> 3){
-                        //exit = true; //tüm redeleri jcas a cevirmek icin bu satiri commentle
-                        break;
+                        count++;
+                        sb = new StringBuilder();
+                        for(String s: r.getRedetext()){
+                            sb.append(s);
+                        }
+                        jCas = toCas(sb.toString());
+                        //System.out.println(sb.toString());
+
+
+                        System.out.println(j +"  Reading Protocol sitzungsnumber : " + sitzungsnumber);
+                        System.out.println("######################################    "+ count + "   ###########################################");
+                        SimplePipeline.runPipeline(jCas, pAE);
+                        //PrintJCasInfo(j);
+                        //System.out.println(getXml(j));
+                        jmongo.InsertJcasXml(getXml(jCas),r);
                     }
 
                 }
-                //if(exit){
-                    //break;
-                //}
+            } catch (Exception e) {
+                e.printStackTrace();
+                errorlist.add(sitzungsnumber);
             }
-            //if(exit){
-                //break;
-            //}
+
+        }
+        if(errorlist.size() > 0) {
+            System.out.println("************************* Error Protocol sitzungsnummber *************************************");
+            for (String s: errorlist){
+                System.out.println(s);
+            }
         }
         System.out.println("redecount : "+count);
 
-        AggregateBuilder builder = new AggregateBuilder();
-        builder.add(createEngineDescription(SpaCyMultiTagger3.class,
-                SpaCyMultiTagger3.PARAM_REST_ENDPOINT, "http://spacy.prg2021.texttechnologylab.org"));
-        builder.add(createEngineDescription(GerVaderSentiment.class,
-                GerVaderSentiment.PARAM_REST_ENDPOINT, "http://gervader.prg2021.texttechnologylab.org",
-                GerVaderSentiment.PARAM_SELECTION , "text,de.tudarmstadt.ukp.dkpro.core.api.segmentation.type.Sentence"));
-        AnalysisEngine pAE = builder.createAggregate();
-
-        JCas_MongoDB_Impl jmongo = new JCas_MongoDB_Impl(db);
 
         int i = 1;
         for(RedeJcas rjs : redejcaslist) {
@@ -430,6 +449,7 @@
 
     }
 
+
     /***
      * Dank des Pipelines wird jede CAS Obeckt dem Xml-String serialisiert.
      * @param jCas
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"e1156904-ce1d-4ad2-963a-0043eea1bf13\" name=\"Changes\" comment=\"Merge remote-tracking branch 'origin/master'&#10;&#10;# Conflicts:&#10;#&#9;.idea/workspace.xml&#10;#&#9;src/main/java/Main.java&#10;#&#9;src/main/java/database/MongoDBConnectionHandler.java&#10;#&#9;target/classes/Main.class&#10;#&#9;target/classes/database/MongoDBConnectionHandler.class\">\n      <change afterPath=\"$PROJECT_DIR$/uml_02.pdf\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/usecase_2.1.pdf\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/usecase_2.2.pdf\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/Main.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/Main.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/database/JCas_MongoDB_Impl.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/database/JCas_MongoDB_Impl.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/database/Protokoll_MongoDB_Impl.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/database/Protokoll_MongoDB_Impl.class\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/target/classes/implementation/RedeJcas.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/implementation/RedeJcas.class\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"UPDATE_TYPE\" value=\"REBASE\" />\n  </component>\n  <component name=\"JpbToolWindowState\">\n    <option name=\"myId2FirstActivated\">\n      <map>\n        <entry key=\"com.haulmont.jpb.jpaStructure\" value=\"true\" />\n      </map>\n    </option>\n    <option name=\"myId2Visible\">\n      <map>\n        <entry key=\"com.haulmont.jpb.jpaStructure\" value=\"false\" />\n      </map>\n    </option>\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"22EUd6IShAFu7L4NAq0G6K1Rkzt\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\n      <module name=\"Uebung2\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.Main\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"e1156904-ce1d-4ad2-963a-0043eea1bf13\" name=\"Changes\" comment=\"\" />\n      <created>1639402323465</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1639402323465</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"1\">\n      <created>1639402377250</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1639402377250</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"2\">\n      <created>1639403244428</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1639403244428</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"3\">\n      <created>1639404321495</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1639404321495</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"4\">\n      <created>1639424543193</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1639424543194</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"3\">\n      <created>1639619188466</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1639619188466</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"3\">\n      <created>1639619401758</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1639619401759</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"5\">\n      <created>1639619458506</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1639619458506</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"Merge remote-tracking branch 'origin/master'&#10;&#10;# Conflicts:&#10;#&#9;.idea/workspace.xml&#10;#&#9;src/main/java/Main.java&#10;#&#9;src/main/java/database/MongoDBConnectionHandler.java&#10;#&#9;target/classes/Main.class&#10;#&#9;target/classes/database/MongoDBConnectionHandler.class\">\n      <created>1639619617569</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1639619617569</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"Merge remote-tracking branch 'origin/master'&#10;&#10;# Conflicts:&#10;#&#9;.idea/workspace.xml&#10;#&#9;src/main/java/Main.java&#10;#&#9;src/main/java/database/MongoDBConnectionHandler.java&#10;#&#9;target/classes/Main.class&#10;#&#9;target/classes/database/MongoDBConnectionHandler.class\">\n      <created>1639619625586</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1639619625586</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"Merge remote-tracking branch 'origin/master'&#10;&#10;# Conflicts:&#10;#&#9;.idea/workspace.xml&#10;#&#9;src/main/java/Main.java&#10;#&#9;src/main/java/database/MongoDBConnectionHandler.java&#10;#&#9;target/classes/Main.class&#10;#&#9;target/classes/database/MongoDBConnectionHandler.class\">\n      <created>1639663352784</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1639663352784</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"Merge remote-tracking branch 'origin/master'&#10;&#10;# Conflicts:&#10;#&#9;.idea/workspace.xml&#10;#&#9;src/main/java/Main.java&#10;#&#9;src/main/java/database/MongoDBConnectionHandler.java&#10;#&#9;target/classes/Main.class&#10;#&#9;target/classes/database/MongoDBConnectionHandler.class\">\n      <created>1639663372230</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1639663372230</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"Merge remote-tracking branch 'origin/master'&#10;&#10;# Conflicts:&#10;#&#9;.idea/workspace.xml&#10;#&#9;src/main/java/Main.java&#10;#&#9;src/main/java/database/MongoDBConnectionHandler.java&#10;#&#9;target/classes/Main.class&#10;#&#9;target/classes/database/MongoDBConnectionHandler.class\">\n      <created>1639663481002</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1639663481002</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"13\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\n    <MESSAGE value=\"1\" />\n    <MESSAGE value=\"2\" />\n    <MESSAGE value=\"4\" />\n    <MESSAGE value=\"6\" />\n    <MESSAGE value=\"3\" />\n    <MESSAGE value=\"5\" />\n    <MESSAGE value=\"Merge remote-tracking branch 'origin/master'&#10;&#10;# Conflicts:&#10;#&#9;.idea/workspace.xml&#10;#&#9;src/main/java/Main.java&#10;#&#9;src/main/java/database/MongoDBConnectionHandler.java&#10;#&#9;target/classes/Main.class&#10;#&#9;target/classes/database/MongoDBConnectionHandler.class\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Merge remote-tracking branch 'origin/master'&#10;&#10;# Conflicts:&#10;#&#9;.idea/workspace.xml&#10;#&#9;src/main/java/Main.java&#10;#&#9;src/main/java/database/MongoDBConnectionHandler.java&#10;#&#9;target/classes/Main.class&#10;#&#9;target/classes/database/MongoDBConnectionHandler.class\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision a5e43dbcab7dc351809916f4dafa3288433329b8)
+++ b/.idea/workspace.xml	(date 1639678992473)
@@ -4,15 +4,14 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="e1156904-ce1d-4ad2-963a-0043eea1bf13" name="Changes" comment="Merge remote-tracking branch 'origin/master'&#10;&#10;# Conflicts:&#10;#&#9;.idea/workspace.xml&#10;#&#9;src/main/java/Main.java&#10;#&#9;src/main/java/database/MongoDBConnectionHandler.java&#10;#&#9;target/classes/Main.class&#10;#&#9;target/classes/database/MongoDBConnectionHandler.class">
-      <change afterPath="$PROJECT_DIR$/uml_02.pdf" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/usecase_2.1.pdf" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/usecase_2.2.pdf" afterDir="false" />
+    <list default="true" id="e1156904-ce1d-4ad2-963a-0043eea1bf13" name="Changes" comment="5">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/database/Protokoll_MongoDB_Impl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/database/Protokoll_MongoDB_Impl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/database/Redner_MonngoDB_File_Impl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/database/Redner_MonngoDB_File_Impl.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/Main.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/Main.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/database/JCas_MongoDB_Impl.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/database/JCas_MongoDB_Impl.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/database/Protokoll_MongoDB_Impl.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/database/Protokoll_MongoDB_Impl.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/implementation/RedeJcas.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/implementation/RedeJcas.class" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -166,7 +165,35 @@
       <option name="project" value="LOCAL" />
       <updated>1639663481002</updated>
     </task>
-    <option name="localTasksCounter" value="13" />
+    <task id="LOCAL-00013" summary="3">
+      <created>1639668347486</created>
+      <option name="number" value="00013" />
+      <option name="presentableId" value="LOCAL-00013" />
+      <option name="project" value="LOCAL" />
+      <updated>1639668347486</updated>
+    </task>
+    <task id="LOCAL-00014" summary="4">
+      <created>1639668356535</created>
+      <option name="number" value="00014" />
+      <option name="presentableId" value="LOCAL-00014" />
+      <option name="project" value="LOCAL" />
+      <updated>1639668356535</updated>
+    </task>
+    <task id="LOCAL-00015" summary="4">
+      <created>1639668391164</created>
+      <option name="number" value="00015" />
+      <option name="presentableId" value="LOCAL-00015" />
+      <option name="project" value="LOCAL" />
+      <updated>1639668391164</updated>
+    </task>
+    <task id="LOCAL-00016" summary="5">
+      <created>1639668421645</created>
+      <option name="number" value="00016" />
+      <option name="presentableId" value="LOCAL-00016" />
+      <option name="project" value="LOCAL" />
+      <updated>1639668421645</updated>
+    </task>
+    <option name="localTasksCounter" value="17" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -184,11 +211,11 @@
     <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
     <MESSAGE value="1" />
     <MESSAGE value="2" />
-    <MESSAGE value="4" />
     <MESSAGE value="6" />
+    <MESSAGE value="Merge remote-tracking branch 'origin/master'&#10;&#10;# Conflicts:&#10;#&#9;.idea/workspace.xml&#10;#&#9;src/main/java/Main.java&#10;#&#9;src/main/java/database/MongoDBConnectionHandler.java&#10;#&#9;target/classes/Main.class&#10;#&#9;target/classes/database/MongoDBConnectionHandler.class" />
     <MESSAGE value="3" />
+    <MESSAGE value="4" />
     <MESSAGE value="5" />
-    <MESSAGE value="Merge remote-tracking branch 'origin/master'&#10;&#10;# Conflicts:&#10;#&#9;.idea/workspace.xml&#10;#&#9;src/main/java/Main.java&#10;#&#9;src/main/java/database/MongoDBConnectionHandler.java&#10;#&#9;target/classes/Main.class&#10;#&#9;target/classes/database/MongoDBConnectionHandler.class" />
-    <option name="LAST_COMMIT_MESSAGE" value="Merge remote-tracking branch 'origin/master'&#10;&#10;# Conflicts:&#10;#&#9;.idea/workspace.xml&#10;#&#9;src/main/java/Main.java&#10;#&#9;src/main/java/database/MongoDBConnectionHandler.java&#10;#&#9;target/classes/Main.class&#10;#&#9;target/classes/database/MongoDBConnectionHandler.class" />
+    <option name="LAST_COMMIT_MESSAGE" value="5" />
   </component>
 </project>
\ No newline at end of file
Index: src/main/java/database/Redner_MonngoDB_File_Impl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package database;\n\nimport abstractclasses.Protokoll;\nimport com.mongodb.client.FindIterable;\nimport com.mongodb.client.MongoCollection;\nimport com.mongodb.client.MongoCursor;\nimport com.mongodb.client.MongoDatabase;\nimport com.mongodb.client.result.DeleteResult;\nimport com.mongodb.client.result.UpdateResult;\nimport implementation.Abgeordnete;\nimport implementation.Redner;\nimport org.bson.Document;\nimport org.bson.types.ObjectId;\nimport database.MongoDBConnectionHandler;\n\nimport java.util.ArrayList;\n\n/***\n * In dieser KLasse werden Prozesse(Insert, Delete, Read, Update) in der Datenbank mit Redner durchgeführt.\n */\n\npublic class Redner_MonngoDB_File_Impl {\n    public static MongoDBConnectionHandler mongoDBConnectionHandler;\n    private MongoDatabase database;\n\n    public Redner_MonngoDB_File_Impl (MongoDBConnectionHandler connection) {\n        this.mongoDBConnectionHandler = connection;\n        this.database = connection.getDatabase();\n    }\n\n    /***\n     * In dieser Methode werden der Redner in dem MongoDB hinzugefügt.\n     * @param redner\n     */\n\n    public void insertRedner(Redner redner){\n        MongoCollection<Document> redners = database.getCollection(\"redners\");\n        Document document = new Document(\"_id\",new ObjectId());\n        document.append(\"rednerid\", redner.getId());\n        document.append(\"titel\", redner.getTitel());\n        document.append(\"vorname\", redner.getVorname());\n        document.append(\"nachname\", redner.getNachname());\n        if (redner instanceof Abgeordnete) {\n            Abgeordnete abg = (Abgeordnete) redner;\n            document.append(\"fraktion\", abg.getFraktion());\n        }\n        else {\n            document.append(\"fraktion\", \"\");\n        }\n        redners.insertOne(document);\n\n\n\n    }\n\n    /***\n     * In dieser Methode werden der Redner in dem MongoDB aktualisiert.\n     * @param redner\n     * @return\n     */\n    public long updateRedner(Redner redner){\n        MongoCollection<Document> redners = database.getCollection(\"redners\");\n\n        Document query;\n        FindIterable<Document> itr;\n        itr = redners.find(new Document(\"rednerid\", redner.getId()));\n        if(itr.cursor().hasNext()) {\n            query = itr.first();\n            Document newdoc = new Document(\"_id\", query.get(\"_id\"));\n\n            newdoc.append(\"rednerid\", redner.getId());\n            newdoc.append(\"titel\", redner.getTitel());\n            newdoc.append(\"vorname\", redner.getVorname());\n            newdoc.append(\"nachname\", redner.getNachname());\n            if (redner instanceof Abgeordnete) {\n                Abgeordnete abg = (Abgeordnete) redner;\n                newdoc.append(\"fraktion\", abg.getFraktion());\n            } else {\n                newdoc.append(\"fraktion\", \"\");\n            }\n            UpdateResult result = redners.replaceOne(query, newdoc);\n            return result.getModifiedCount();\n        }\n\n        return 0;\n    }\n\n    /***\n     * in dieser Methode wird der Redner, der bestimmten Parameter (rednerid) hat, aus der MongoDB gelöscht.\n     * @param id\n     * @return long result.getDeletedCount()\n     */\n    public long deleteRedner(String id){\n        MongoCollection<Document> collection = database.getCollection(\"redners\");\n        DeleteResult result;\n        result = collection.deleteOne(new Document(\"rednerid\", id));\n        return result.getDeletedCount();\n\n\n\n    }\n\n    /***\n     * in dieser Methode wird der Redner, der bestimmten Parameter (rednerid) hat, aus der MongoDB gelesen.\n     * @param id\n     * @return redner\n     */\n    public Redner readRedner(String id){\n        MongoCollection<Document> collection = database.getCollection(\"redners\");\n        Document doc;\n        FindIterable<Document> itr;\n        itr = collection.find(new Document(\"rednerid\", id));\n        if(itr.cursor().hasNext()){\n            doc = itr.first();\n            String strid = (String) doc.get(\"rednerid\");\n            String titel = (String) doc.get(\"titel\");\n            String vorname = (String) doc.get(\"vorname\");\n            String nachname = (String) doc.get(\"nachname\");\n            String fraktion = (String) doc.get(\"fraktion\");\n            if (fraktion.equals(\"\")) {\n                Redner redner = new Redner();\n                redner.setId(id);\n                redner.setTitel(titel);\n                redner.setVorname(vorname);\n                redner.setNachname(nachname);\n                return redner;\n\n            }\n            else {\n                Abgeordnete abg = new Abgeordnete();\n                abg.setId(id);\n                abg.setTitel(titel);\n                abg.setVorname(vorname);\n                abg.setNachname(nachname);\n                abg.setFraktion(fraktion);\n                return abg;\n            }\n\n        }\n        else {\n            return null;\n        }\n\n    }\n\n    /***\n     * in dieser Methode werden alle Redner aus der MongoDB gelesen.\n     * @return ArrayList<Redner> rednerArrayList\n     */\n    public ArrayList<Redner> readAllRednersfromMongo() {\n        MongoCollection<Document> collection = database.getCollection(\"redners\");\n        Document doc;\n        FindIterable<Document> itr;\n        itr = collection.find();\n        MongoCursor<Document> cursor = itr.iterator();\n        String rednerid;\n        ArrayList<Redner> rednerArrayList = new ArrayList<>();\n        while (cursor.hasNext()) {\n            doc = cursor.next();\n            rednerid = doc.getString(\"rednerid\");\n            try {\n                System.out.println(\"rednerid : \" + rednerid);\n                //strid = readRedner(r);\n                //System.out.println(protokoll.getSitzungsnumber());\n                //protokolls.add(protokoll);\n\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n\n        }\n        cursor.close();\n        return rednerArrayList;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/database/Redner_MonngoDB_File_Impl.java b/src/main/java/database/Redner_MonngoDB_File_Impl.java
--- a/src/main/java/database/Redner_MonngoDB_File_Impl.java	(revision a5e43dbcab7dc351809916f4dafa3288433329b8)
+++ b/src/main/java/database/Redner_MonngoDB_File_Impl.java	(date 1639678991689)
@@ -56,7 +56,7 @@
     /***
      * In dieser Methode werden der Redner in dem MongoDB aktualisiert.
      * @param redner
-     * @return
+     * @return result.getModifiedCount()
      */
     public long updateRedner(Redner redner){
         MongoCollection<Document> redners = database.getCollection("redners");
Index: src/main/java/database/Protokoll_MongoDB_Impl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package database;\n\nimport abstractclasses.Protokoll;\nimport com.mongodb.client.FindIterable;\nimport com.mongodb.client.MongoCollection;\nimport com.mongodb.client.MongoCursor;\nimport com.mongodb.client.MongoDatabase;\nimport com.mongodb.client.result.DeleteResult;\nimport de.tudarmstadt.ukp.dkpro.core.api.syntax.type.constituent.S;\nimport implementation.Protokoll_File_Impl;\nimport implementation.Rede;\nimport implementation.Tagesordnungspunkt;\nimport org.bson.Document;\nimport org.bson.types.ObjectId;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/***\n * In dieser KLasse werden Prozesse(Insert, Delete, Read) in der Datenbank mit Protokollen durchgeführt.\n *\n */\n\npublic class Protokoll_MongoDB_Impl {\n    public  Redner_MonngoDB_File_Impl rednerMongoDBFile;\n    public MongoDBConnectionHandler mongoDBConnectionHandler;\n    private MongoDatabase database;\n\n\n    public Protokoll_MongoDB_Impl(MongoDBConnectionHandler connection) {\n        this.mongoDBConnectionHandler = connection;\n        this.database = connection.getDatabase();\n        this.rednerMongoDBFile = new Redner_MonngoDB_File_Impl(connection);\n    }\n\n    /***\n     * In dieser Methode wird das Protocol in dem MongoDB hinzugefügt.\n     * @param protokoll\n     */\n    public void insertProtocol (Protokoll protokoll) {\n            MongoCollection<Document> protocols = database.getCollection(\"protocol\");\n            Document document = new Document(\"_id\",new ObjectId());\n            document.append(\"titel\", protokoll.getTitel());\n            document.append(\"datum\", protokoll.getDatum());\n            document.append(\"sitzungsnumber\", protokoll.getSitzungsnumber());\n            List<Document> lst = new ArrayList<>();\n            Document doc;\n            if(protokoll.getTagesordnungspunkts() != null){\n                for(Tagesordnungspunkt t:protokoll.getTagesordnungspunkts()) {\n                    doc = new Document();\n                    doc.append(\"topid\", t.getTopid());\n                    doc.append(\"reden\", redelistdocument(t.getReden()));\n                    lst.add(doc);\n                }\n            }\n\n            document.append(\"tagesordnungspunkts\",lst);\n            protocols.insertOne(document);\n\n\n\n\n    }\n\n    /***\n     * in dieser Methode wird das Protocol, das bestimmten Parameter (sitzungsnumber) hat, aus der MongoDB gelöscht.\n     * @param sitzungsnumber\n     * @return\n     */\n    public long deleteProtocol(String sitzungsnumber){\n        MongoCollection<Document> collection = database.getCollection(\"protocol\");\n        DeleteResult result;\n        result = collection.deleteOne(new Document(\"sitzungsnumber\", sitzungsnumber));\n        return result.getDeletedCount();\n\n\n\n    }\n\n    /***\n     * in dieser Methode wird das Protocol, das bestimmten Parameter (sitzungsnumber) hat, aus der MongoDB gelesen.\n     * @param sitzungsnumber\n     * @return\n     * @throws Exception\n     */\n    public Protokoll readProtocol(String sitzungsnumber) throws Exception{\n        MongoCollection<Document> collection = database.getCollection(\"protocol\");\n        Document doc;\n        FindIterable<Document> itr;\n        itr = collection.find(new Document(\"sitzungsnumber\", sitzungsnumber));\n        MongoCursor<Document> cursor = itr.iterator();\n        if(cursor.hasNext()){\n            Protokoll p = new Protokoll_File_Impl();\n            ArrayList<Tagesordnungspunkt> tlist = new ArrayList<>();\n            List<Document> lstdocument;\n            doc = cursor.next();\n            String titel = (String) doc.get(\"titel\");\n            String datum = (String) doc.get(\"datum\");\n            if(doc.get(\"tagesordnungspunkts\") instanceof List<?>) {\n                lstdocument = (List<Document>) doc.get(\"tagesordnungspunkts\");\n                tlist = tagesordnungspunktList(lstdocument, p);\n                //System.out.println(\"tagescount : \"+ tlist.size());\n            }\n            else {\n                throw new Exception(\"error\");\n            }\n            p.setSitzungsnumber(sitzungsnumber);\n            p.setTagesordnungspunkts(tlist);\n            p.setTitel(titel);\n            p.setDatum(datum);\n            return p;\n\n        }\n        else {\n            return null;\n        }\n\n    }\n\n    /***\n     * in dieser Methode werden alle Protokolle aus der MongoDB gelesen.\n     * @return\n     */\n    public ArrayList<Protokoll> readAllProtocolsfromMongo() {\n        MongoCollection<Document> collection = database.getCollection(\"protocol\");\n        Document doc;\n        FindIterable<Document> itr;\n        itr = collection.find();\n        MongoCursor<Document> cursor = itr.iterator();\n        String sitzungsnumber;\n        Protokoll protokoll;\n        ArrayList<Protokoll> protokolls = new ArrayList<>();\n        while (cursor.hasNext() ) {\n            doc = cursor.next();\n            sitzungsnumber = doc.getString(\"sitzungsnumber\");\n            try {\n                System.out.println(\"sitzungsnumber : \" + sitzungsnumber);\n                protokoll = readProtocol(sitzungsnumber);\n                System.out.println(protokoll.getSitzungsnumber());\n                protokolls.add(protokoll);\n\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n\n        }\n        return protokolls;\n    }\n\n    /***\n     * In dieser Methode werden die Tagesordnungspunkten als Arraylist erstellt, um die Protokolle einfacher zu lesen.\n     * @param tageslist\n     * @param protokoll\n     * @return\n     */\n\n    private ArrayList<Tagesordnungspunkt> tagesordnungspunktList(List<Document> tageslist, Protokoll protokoll) {\n        ArrayList<Tagesordnungspunkt> tlist = new ArrayList<>();\n        String topid;\n        List<Document> redendoclist;\n        Tagesordnungspunkt t;\n        for(Document d : tageslist){\n            topid = (String) d.get(\"topid\");\n            redendoclist = (List<Document>) d.get(\"reden\");\n            t = new Tagesordnungspunkt();\n            t.setTopid(topid);\n            t.setReden(buildredelist(redendoclist , t));\n            t.setProtokoll(protokoll);\n            tlist.add(t);\n        }\n        return tlist;\n\n    }\n\n    /***\n     * In dieser Methode werden die Redetext als Arraylist erstellt, um die Protokolle einfacher zu lesen.\n     * @param rededoclist\n     * @param tagesordnungspunkt\n     * @return\n     */\n    private ArrayList<Rede> buildredelist (List<Document> rededoclist, Tagesordnungspunkt tagesordnungspunkt) {\n        ArrayList<Rede> redelist = new ArrayList<>();\n        String id;\n        String rednerid;\n        List<Document> redetextdoclist;\n        List<String> redetextlist;\n        Rede r;\n        for(Document d : rededoclist) {\n            id = (String) d.get(\"id\");\n            rednerid = d.getString(\"rednerid\");\n            redetextlist = d.getList(\"redetext\",String.class);\n\n\n            r = new Rede();\n            r.setId(id);\n            r.setRedner(rednerMongoDBFile.readRedner(rednerid));\n            r.setRedetext(new ArrayList<>(redetextlist));\n            r.setTagesordnungspunkt(tagesordnungspunkt);\n            redelist.add(r);\n\n        }\n        return redelist;\n    }\n\n    /***\n     * in dieser Methode wird jede Redetext als Document erstellt, um die Protokolle zu lesen.\n     * @param reden\n     * @return\n     */\n    private List<Document> redelistdocument(List<Rede> reden) {\n        Document doc;\n        List<Document> lst = new ArrayList<>();\n        for(Rede r:reden) {\n            doc = new Document();\n            doc.append(\"id\",r.getId());\n            if(r.getRedner() != null){\n                doc.append(\"rednerid\", r.getRedner().getId());\n            }\n            else {\n                System.out.println(\"Rede : \"+ r.getId()+ \" Tages : \"+ r.getTagesordnungspunkt().getTopid()+ \"Protocol : \"+ r.getTagesordnungspunkt().getProtokoll().getSitzungsnumber());\n                doc.append(\"rednerid\", \"\");\n            }\n\n            doc.append(\"redetext\", r.getRedetext());\n            lst.add(doc);\n\n        }\n        return lst;\n\n    }\n\n    /***\n     * in dieser Methode wird der Rede, der bestimmten Parameter (redeid) hat, aus der MongoDB aktualisiert.\n     * @param rede\n     */\n    public void updateRede (Rede rede) {\n        MongoCollection<Document> collection = database.getCollection(\"protocol\");\n        Document query = new Document(\"sitzungsnumber\", rede.getTagesordnungspunkt().getProtokoll().getSitzungsnumber());\n        ArrayList<Document> listtages = new ArrayList<>();\n        Document tages = new Document(\"topid\",rede.getTagesordnungspunkt().getTopid());\n        ArrayList<Document> listreden = new ArrayList<>();\n        Document rededoc = new Document(\"id\", rede.getId());\n        tages.append(\"reden\", listreden);\n        listreden.add(rededoc);\n        listtages.add(tages);\n        query.append(\"tagesordnungspunkts\", listtages);\n        MongoCursor<Document> cursor = collection.find(query).iterator();\n        Document doc;\n        if (cursor.hasNext()){\n            doc = cursor.next();\n            List<String> redetext = doc.getList(\"redetext\", String.class);\n            for(String s : redetext) {\n                System.out.println(s);\n            }\n        }\n        else {\n            System.out.println(\"rede not found\");\n        }\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/database/Protokoll_MongoDB_Impl.java b/src/main/java/database/Protokoll_MongoDB_Impl.java
--- a/src/main/java/database/Protokoll_MongoDB_Impl.java	(revision a5e43dbcab7dc351809916f4dafa3288433329b8)
+++ b/src/main/java/database/Protokoll_MongoDB_Impl.java	(date 1639678851273)
@@ -65,7 +65,7 @@
     /***
      * in dieser Methode wird das Protocol, das bestimmten Parameter (sitzungsnumber) hat, aus der MongoDB gelöscht.
      * @param sitzungsnumber
-     * @return
+     * @return result.getDeletedCount()
      */
     public long deleteProtocol(String sitzungsnumber){
         MongoCollection<Document> collection = database.getCollection("protocol");
@@ -80,7 +80,7 @@
     /***
      * in dieser Methode wird das Protocol, das bestimmten Parameter (sitzungsnumber) hat, aus der MongoDB gelesen.
      * @param sitzungsnumber
-     * @return
+     * @return p
      * @throws Exception
      */
     public Protokoll readProtocol(String sitzungsnumber) throws Exception{
@@ -119,7 +119,7 @@
 
     /***
      * in dieser Methode werden alle Protokolle aus der MongoDB gelesen.
-     * @return
+     * @return protokolls
      */
     public ArrayList<Protokoll> readAllProtocolsfromMongo() {
         MongoCollection<Document> collection = database.getCollection("protocol");
@@ -147,11 +147,31 @@
         return protokolls;
     }
 
+    /***
+     * in dieser Methode werden alle Protokolleid (sitzungsnumber) aus der MongoDB gelesen.
+     * @return sitzungsnumbers
+     */
+    public ArrayList<String> readAllProtocolssitzungsnumberfromMongo() {
+        MongoCollection<Document> collection = database.getCollection("protocol");
+        Document doc;
+        FindIterable<Document> itr;
+        itr = collection.find();
+        MongoCursor<Document> cursor = itr.iterator();
+        String sitzungsnumber;
+        ArrayList<String> sitzungsnumbers = new ArrayList<>();
+        while (cursor.hasNext() ) {
+            doc = cursor.next();
+            sitzungsnumber = doc.getString("sitzungsnumber");
+            sitzungsnumbers.add(sitzungsnumber);
+        }
+        return sitzungsnumbers;
+    }
+
     /***
      * In dieser Methode werden die Tagesordnungspunkten als Arraylist erstellt, um die Protokolle einfacher zu lesen.
      * @param tageslist
      * @param protokoll
-     * @return
+     * @return tlist
      */
 
     private ArrayList<Tagesordnungspunkt> tagesordnungspunktList(List<Document> tageslist, Protokoll protokoll) {
@@ -176,7 +196,7 @@
      * In dieser Methode werden die Redetext als Arraylist erstellt, um die Protokolle einfacher zu lesen.
      * @param rededoclist
      * @param tagesordnungspunkt
-     * @return
+     * @return redelist
      */
     private ArrayList<Rede> buildredelist (List<Document> rededoclist, Tagesordnungspunkt tagesordnungspunkt) {
         ArrayList<Rede> redelist = new ArrayList<>();
@@ -205,7 +225,7 @@
     /***
      * in dieser Methode wird jede Redetext als Document erstellt, um die Protokolle zu lesen.
      * @param reden
-     * @return
+     * @return lst
      */
     private List<Document> redelistdocument(List<Rede> reden) {
         Document doc;
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Uebung02\nGamze Batil\nMatrikelnummer : 7357240\nProjekt Name: MongoDB\n\n\n--Generelle Benutzungsangaben--\n- Voraussetzung: Für das Laufen des Programms ist die Installation eines Java 1.8 Interpreters (oder neu), die mit den Bibliotheken\n  und Support-Programmen der Standard-Installation ausgestattet ist und ein Application, der MongoDB unterstützt.\n  -Inbetriebannahme : Zum Starten des Programms, öffnen Sie bitte folgende .java-Datei, main.py, in Ihrer Shell\n  oder den Compiler, den Sie momentan verwenden. Für WindowsNutzer: Sie können das Programm  ebenfalls starten, wenn sie\n  einen Doppelklick auf oben benannte Datei ausführen. Das Programm öffnetsich dann automatisch.Das Programm starten Sie,\n  indem Sie in Ihrer „command-Leiste“ des Compilers auf den Button „Run“ klicken. Das Programm startet automatisch.\n\n-Das Programm wird gestartet und der User soll einen Pfad eingeben, in dem Sich der Ordner mit den XML Dateien für die Protokolle befinden.\nSind in diesem keine enthalten, muss der User den Pfad erneut eingeben.\nDanach wird der User gefragt was er machen möchte. Seine Wahl gibt er immer mit einer Zahl an. Welche Möglichkeiten es gibt werden ausgeprintet.\nUserinterface:\n\n--Enter 1 : Redners--\n--Enter 2 : Abgeordnete--\n\nEr hat die Möglichkeit Alle Redner der Fraktionen auszugeben und nach bestimmten Rednern zu filtern.\nPasst zu dem Filter kein  Abgeordneter, wird nichts ausgegeben.\n\n--Enter 3 : Fraktion Redners--\n\nEr kann die Abgeordneten einer bestimmten Partei ausgeben,\nauch hier gibt er eine Zahl ein, die Abgeordneten dieser Partei.\n\n--Enter 4 : Protokoll Tagesordunungpunkttexts--\n\ner hat die Möglichkeit den Inhalt eines Tagesordnungspunktes mit einer Nummer auszugeben.\n\n--Enter 5 : MongoDB test--\n\nEr kann hier die Methode (Testcases über Insert,Delete,Read, Update) testen.\n\n--Enter 6 : MongoDB insert all collection--\n\nEr kann die Collections in MongoDB einfügen.\n\n--Enter 7 : MongoDB remove all collection--\n\nEr kann hier die Collections aus der MongoDB löschen.\n\n--Enter 8 : Show MongoDB Protocol--\n\nEr kann die gewünschte Protokollid (sitzungsnumber) eingeben und die gewünschte Protokoll aus der Mongodatabase wird \nausgegeben.\n\n--Enter 9 : CasObjeckt + Pipeline--\n\nEr kann hier CasObjeckte als Xml Objeckt in MongoDB erstellen.\n\n--Enter 10 : Exit--\n\n\n--Weitere Informationen:--\nFür den Fall das er eine falsche eingabe tätigt, muss er erneut eine Zahl eingeben.\ner hat die Möglichkeit das Programm jederzeit zu beenden\n\n\nBugs und eventuelle Fehlerbehebungen\nZum Zeitpunkt der Veröffentlichung sind keine Bugs bekannt.\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision a5e43dbcab7dc351809916f4dafa3288433329b8)
+++ b/README.md	(date 1639678598712)
@@ -17,6 +17,8 @@
 Danach wird der User gefragt was er machen möchte. Seine Wahl gibt er immer mit einer Zahl an. Welche Möglichkeiten es gibt werden ausgeprintet.
 Userinterface:
 
+--Enter 0 : Read all Xml Files--
+
 --Enter 1 : Redners--
 --Enter 2 : Abgeordnete--
 
