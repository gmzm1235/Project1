Index: src/main/java/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import abstractclasses.Protokoll;\nimport database.MongoDBConnectionHandler;\nimport de.tudarmstadt.ukp.dkpro.core.api.ner.type.NamedEntity;\nimport de.tudarmstadt.ukp.dkpro.core.api.segmentation.type.Sentence;\nimport de.tudarmstadt.ukp.dkpro.core.api.segmentation.type.Token;\nimport implementation.*;\nimport database.*;\nimport org.apache.uima.UIMAException;\nimport org.apache.uima.analysis_engine.AnalysisEngine;\nimport org.apache.uima.cas.CAS;\nimport org.apache.uima.cas.impl.XCASSerializer;\nimport org.apache.uima.fit.factory.AggregateBuilder;\nimport org.apache.uima.fit.factory.JCasFactory;\nimport org.apache.uima.fit.pipeline.SimplePipeline;\nimport org.apache.uima.fit.util.JCasUtil;\nimport org.apache.uima.jcas.JCas;\nimport org.apache.uima.resource.ResourceInitializationException;\nimport org.bson.Document;\nimport org.hucompute.textimager.uima.gervader.GerVaderSentiment;\nimport org.hucompute.textimager.uima.spacy.SpaCyMultiTagger3;\nimport org.hucompute.textimager.uima.type.Sentiment;\nimport org.xml.sax.SAXException;\n\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.util.*;\n\nimport static org.apache.uima.fit.factory.AnalysisEngineFactory.createEngineDescription;\n\n\n/***\n\n * die Location Path von den xml files wird von dem User in dem Class Main angefordert und\n * um dieser Folder zu lesen wird Class Main mithilfe der implementation.Plenarsitzung Class gearbeitet.\n * Die Methode, die den angeforderten Job ausführt, wird basierend auf der bereitgestellten Eingabe aufgerufen.\n * Nach Eingabe des Benutzers kann Main auch mit MongoDB verbunden und\n * Operationen(Delete, Insert, Update, Read) mit MongoDB ausgeführt werden.\n * Wenn der User einen falschen Input eingibt, dann wird von dem User noch Mal neue Input angefordert\n *\n *\n */\npublic class Main {\n    public static Plenarsitzung plenarsitzung;\n    public static Scanner input;\n    public static MongoDBConnectionHandler db;\n\n    public static void main(String[] args) {\n        try {\n            db = new MongoDBConnectionHandler();\n            Thread.sleep(500);\n            input = new Scanner(System.in);\n            int choice;\n            while (true) {\n                System.out.println(\"Enter 0 : Read all Xml Files\");\n                System.out.println(\"Enter 1 : Redners\");\n                System.out.println(\"Enter 2 : Abgeordnete\");\n                System.out.println(\"Enter 3 : Fraktion Redners\");\n                System.out.println(\"Enter 4 : Protokoll Tagesordunungpunkttexts\");\n                System.out.println(\"Enter 5 : MongoDB test\");\n                System.out.println(\"Enter 6 : MongoDB insert all collection\");\n                System.out.println(\"Enter 7 : MongoDB remove all collection\");\n                System.out.println(\"Enter 8 : Show MongoDB Protocol\");\n                System.out.println(\"Enter 9 : CasObjeckt + Pipeline\");\n                System.out.println(\"Enter 10 : Exit\");\n                System.out.println();\n                System.out.print(\"Enter your choice : \");\n                choice = input.nextInt();\n                input.nextLine();\n                if (choice == 0) {\n                    String folderlocation = \"xmlfiles\";\n                    System.out.println(\"Enter xmlfilespath : \");\n                    folderlocation = input.nextLine();\n                    plenarsitzung = new Plenarsitzung(folderlocation);\n                    //plenarsitzung = new Plenarsitzung(\"/home/gbatil/Downloads/xmlfiles\");\n\n                    //plenarsitzung = new Plenarsitzung(folderlocation);\n                    System.out.println(\"reading from Files...\");\n                    plenarsitzung.build();\n                }\n                else if (choice == 1) {\n                    printRedners();\n                }\n                else if (choice == 2) {\n                    printAbgeordnete();\n                }\n                else if (choice == 3) {\n                    printFraktionRedners();\n                }\n                else if (choice == 4) {\n                    printProtokollTagesordunungpunkttexts();\n                }\n                else if (choice == 5) {\n                    MongodbTest();\n                }\n                else if (choice == 6) {\n                    MongodbInsertAllCollections();\n                }\n                else if (choice == 7) {\n                    MongodbDeleteAllCollections();\n                }\n                else if (choice == 8) {\n                    MongoShowProtocol();\n                    //MongoShowRedner();\n                }\n                else if (choice == 9) {\n                    MyJCas();\n                }\n\n                else if (choice == 10){\n                    break;\n                }\n                else {\n                    System.out.println(\"InValid Choice\");\n                }\n\n            }\n\n        } catch (Exception exp) {\n            //System.out.println(exp.getClass().getName() +\" : \"+ exp.getMessage());\n            exp.printStackTrace();\n        }\n    }\n\n    /***\n     * dieser Methode wird darstellt, um die Redner auszudrucken\n     */\n    public static void printRedners() {\n        plenarsitzung.printAllRedners();\n\n    }\n\n    /***\n     * dieser Methode wird darstellt, um die Abgeordnete auszudrucken\n     */\n    public static void printAbgeordnete() {\n        plenarsitzung.printAllAbgeordnete();\n\n    }\n\n    /***\n     * die Methode wird Informationen darüber, welcher Sprecher zu welcher Partei gehört geprint\n     */\n    public static void printFraktionRedners() {\n        plenarsitzung.printAllFraktionRedners();\n\n    }\n\n    /***\n     * der Methode, der der Text von einem gewählten Tagesordnungspunkt ausgedruckt wird.\n     */\n    public static void printProtokollTagesordunungpunkttexts() {\n        String situngsnumber;\n        String tagesornungspunktnumber;\n        System.out.println(\"Enter situngsnumber : \");\n        situngsnumber = input.nextLine();\n        System.out.println(\"Enter tagesornungspunktnumber : \");\n        tagesornungspunktnumber = input.nextLine();\n        plenarsitzung.printProtokollTagesordnungspunkt(situngsnumber, tagesornungspunktnumber.trim());\n\n    }\n\n    /***\n     * die Methode wird  das Erstellen,\n     * Lesen, Updaten und Löschen von Dokumenten in der MongoDB getestet.\n     */\n    public static void MongodbTest(){\n\n        Redner_MonngoDB_File_Impl rmongo = new Redner_MonngoDB_File_Impl(db);\n        Protokoll_MongoDB_Impl pmongo = new Protokoll_MongoDB_Impl(db);\n        System.out.println(\"Test über readRedner :\");\n        System.out.println(\"Redner ( 11000616 redenid ) Informationen :\");\n        Redner r = rmongo.readRedner(\"11000616\");\n        if (r!=null){\n            System.out.println(r.getId()+\" \"+r.getTitel()+\" \"+r.getVorname()+\" \"+ r.getNachname());\n        }\n        else {\n            System.out.println(\"der Redner existiert nicht\");\n        }\n        System.out.println(\"Test über deleteRedner :\");\n        System.out.println(\"Löscht Redner rednerid : 11000616\");\n        long DeleteCount = rmongo.deleteRedner(\"11000616\");\n        if(DeleteCount > 0) {\n            System.out.println(DeleteCount + \" der Eintrag Redner wird gelöscht..........\");\n        }\n        else {\n            System.out.println(DeleteCount + \" 11000616 id Eintrag existiert nicht\");\n        }\n        System.out.println(\"Test über Update redner : \");\n        System.out.println(\" Bsp : Wir aktualisieren nur die Titel \");\n\n\n        r= new Redner();\n        r.setId(\"11001938\");\n        r.setTitel(\"Dr.\");\n        r.setVorname(\"Wolfgang\");\n        r.setNachname(\"Schäuble\");\n        rmongo.updateRedner(r);\n        Redner r2 = rmongo.readRedner(\"11001938\");\n        if (r2!=null){\n            System.out.println(r2.getId()+\" \"+r2.getTitel()+\" \"+r2.getVorname()+\" \"+ r2.getNachname());\n        }\n        else {\n            System.out.println(\"der Eintrag existiert nicht.........\");\n        }\n\n        System.out.println(\"Test über Delete Protocol\");\n        System.out.println(\"Löscht 221 Protocol\");\n        DeleteCount = pmongo.deleteProtocol(\"221\");\n        if(DeleteCount > 0) {\n            System.out.println(DeleteCount + \" 221 Protokoll wird gelöscht......\");\n        }\n        else {\n            System.out.println(DeleteCount + \" 221 Protokoll existiert nicht....\");\n        }\n        try {\n            System.out.println(\"Test über Read Protocol \");\n            System.out.println(\"Read 197 Protokoll\");\n            Protokoll prt = pmongo.readProtocol(\"197\");\n            if (prt!=null){\n                PrintProtocol(prt);\n            }\n            else {\n                System.out.println(\"197 Protokoll existiert nicht....\");\n            }\n\n\n        }\n        catch (Exception exp) {\n            exp.printStackTrace();\n        }\n\n\n\n\n\n\n\n\n    }\n\n\n    /***\n     * Diese Methode wird die Redner aus der MongoDB Databank gelesen und rufen wir PrintRedner Methode auf ,\n     * um die Redner auszudrucken.\n     *\n     * @throws Exception\n     */\n    public static void MongoShowRedner() throws Exception {\n        ArrayList<Redner> redners = new ArrayList<>();\n\n        Redner_MonngoDB_File_Impl rmongo = new Redner_MonngoDB_File_Impl(db);\n        redners = rmongo.readAllRednersfromMongo();\n        for(Redner r: redners){\n            PrintRedner(r);\n        }\n\n    }\n\n    /***\n     * Diese Methode wird die Protocols aus der MongoDB Databank gelesen und ausgedruckt.\n     * @throws Exception\n     */\n    public static void MongoShowProtocol() throws Exception {\n        System.out.println(\"Enter sitzungsnumber : \");\n        String sitzungsnumber = input.nextLine();\n        Protokoll_MongoDB_Impl pmongo = new Protokoll_MongoDB_Impl(db);\n        Protokoll p = pmongo.readProtocol(sitzungsnumber);\n        PrintProtocol(p);\n    }\n\n    /***\n     * Diese Methode ist eine  HilfsMethode. Wir verwenden sie, um die Redner auszudrucken.\n     * @param r\n     */\n    public static void PrintRedner(Redner r) {\n        if(r!=null) {\n            System.out.println(r.getId()+ \" \"+ r.getTitel()+ \" \"+ r.getVorname()+\" \"+ r.getNachname());\n        }\n    }\n\n    /***\n     * Diese Methode ist eine HilfsMethode. Wir verwenden sie, um die Protocols auszudrucken.\n     * @param p\n     */\n    public static void PrintProtocol(Protokoll p) {\n        if(p!=null) {\n            System.out.println(p.getSitzungsnumber()+ \" \"+p.getTitel()+ \" \"+ p.getDatum());\n            for (Tagesordnungspunkt t : p.getTagesordnungspunkts()) {\n                System.out.println(t.getTopid());\n                if (t.getReden() != null) {\n                    for(Rede r : t.getReden()) {\n                        if(r.getRedner() != null){\n                            System.out.println(r.getId()+ \" Redner : \"+ r.getRedner().getId()+ \" \"+ r.getRedner().getTitel()+ \" \"+ r.getRedner().getVorname()+ \" \"+ r.getRedner().getNachname());\n                        }\n                        else {\n                            System.out.println(r.getId());\n                        }\n\n                        for(String s: r.getRedetext()){\n                            System.out.println(s);\n                        }\n                        System.out.println(\"---------------------------------------\");\n                    }\n                }\n\n                System.out.println(\"+++++++++++++++++++++++++++++++++++++++++++\");\n            }\n        }\n\n    }\n\n    /***\n     * diese Methode wird sich von CLass Redner_MonngoDB_File_Impl und CLass Protokoll_MongoDB_Impl zu Nutze gemacht.\n     * Sie wird die Collections (Redner und Protokolle) zu MongoDB Databank eingefügt.\n     */\n\n    public static void MongodbInsertAllCollections(){\n        Redner_MonngoDB_File_Impl rmongo = new Redner_MonngoDB_File_Impl(db);\n        Protokoll_MongoDB_Impl pmongo = new Protokoll_MongoDB_Impl(db);\n        db.CreateCollections();\n        HashMap<String, Redner> rednerMap = plenarsitzung.getRednerMap();\n        Iterator<String> itr = rednerMap.keySet().iterator();\n        String rednerid;\n        Redner redner;\n        while (itr.hasNext()){\n            rednerid = itr.next();\n            redner = rednerMap.get(rednerid);\n            rmongo.insertRedner(redner);\n        }\n        System.out.println(\"die Redner werden hinzugefügt......\");\n        ArrayList<Protokoll> plist = plenarsitzung.getProtokollList();\n        for (int i = 0;i<plist.size();i++){\n            try {\n                System.out.println((i+1)+ \" Protocol : \"+ plist.get(i).getSitzungsnumber());\n                pmongo.insertProtocol(plist.get(i));\n            }\n           catch (Exception exp){\n               System.out.println(\" Error in Protocol : \"+ plist.get(i).getSitzungsnumber());\n                exp.printStackTrace();\n           }\n\n        }\n        System.out.println(\"die Protokolle werden hinzugefügt......\");\n\n\n\n\n\n\n    }\n\n    /***\n     * diese Methode löscht die Collections aus der Databank.\n     */\n    public static void MongodbDeleteAllCollections(){\n        db.DeleteCollections();\n\n\n\n    }\n\n    /***\n     * In der Methode werden die Protocols mithilfe der Methode readAllProtocolsfromMongo aus der KLasse Protokoll_MongoDB_Impl gelesen.\n     * Dann entsteht eine CAS Objects aus jeder Redetext aus der Protokolle, danach werden Sie in der jCaslist eingefügt.\n     *  Mit der for-Schleife können Inhalte der jCaslist durchlaufen. Jede CAS Objects aus der Liste wird mit Pipline ausgepackt.\n     * @throws UIMAException\n     */\n    public static void MyJCas( ) throws UIMAException {\n        Protokoll_MongoDB_Impl pmongo = new Protokoll_MongoDB_Impl(db);\n        System.out.println(\"Reading sitzungsnumbers.......\");\n        ArrayList<String> sitzungsnumbers = pmongo.readAllProtocolssitzungsnumberfromMongo();\n        System.out.println(\"die Protokolle werden hinzugefügt......\");\n        StringBuilder sb;\n        JCas jCas;\n        int count = 0;\n        boolean exit = false;\n        ArrayList<RedeJcas> redejcaslist = new ArrayList<>();\n        RedeJcas rj;\n\n        AggregateBuilder builder = new AggregateBuilder();\n        builder.add(createEngineDescription(SpaCyMultiTagger3.class,\n                SpaCyMultiTagger3.PARAM_REST_ENDPOINT, \"http://spacy.prg2021.texttechnologylab.org\"));\n        builder.add(createEngineDescription(GerVaderSentiment.class,\n                GerVaderSentiment.PARAM_REST_ENDPOINT, \"http://gervader.prg2021.texttechnologylab.org\",\n                GerVaderSentiment.PARAM_SELECTION , \"text,de.tudarmstadt.ukp.dkpro.core.api.segmentation.type.Sentence\"));\n        AnalysisEngine pAE = builder.createAggregate();\n\n        JCas_MongoDB_Impl jmongo = new JCas_MongoDB_Impl(db);\n        Protokoll p;\n        ArrayList<String> errorlist = new ArrayList<>();\n\n        int j = 0;\n        for(String sitzungsnumber: sitzungsnumbers){\n            j++;\n            try {\n                System.out.println(j+\"  Reading Protocol sitzungsnumber : \" + sitzungsnumber);\n                p = pmongo.readProtocol(sitzungsnumber);\n                System.out.println(j +\"  Success Protocol sitzungsnumber : \" + sitzungsnumber);\n                for (Tagesordnungspunkt t: p.getTagesordnungspunkts()){\n                    for(Rede r : t.getReden()){\n\n                        count++;\n                        sb = new StringBuilder();\n                        for(String s: r.getRedetext()){\n                            sb.append(s);\n                        }\n                        jCas = toCas(sb.toString());\n                        //System.out.println(sb.toString());\n\n\n                        System.out.println(j +\"  Reading Protocol sitzungsnumber : \" + sitzungsnumber);\n                        System.out.println(\"######################################    \"+ count + \"   ###########################################\");\n                        SimplePipeline.runPipeline(jCas, pAE);\n                        //PrintJCasInfo(j);\n                        //System.out.println(getXml(j));\n                        jmongo.InsertJcasXml(getXml(jCas),r);\n                    }\n\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n                errorlist.add(sitzungsnumber);\n            }\n\n        }\n        if(errorlist.size() > 0) {\n            System.out.println(\"************************* Error Protocol sitzungsnummber *************************************\");\n            for (String s: errorlist){\n                System.out.println(s);\n            }\n        }\n        System.out.println(\"redecount : \"+count);\n\n\n        int i = 1;\n        for(RedeJcas rjs : redejcaslist) {\n            System.out.println(\"######################################    \"+ i + \"   ###########################################\");\n            SimplePipeline.runPipeline(rjs.getJcas(), pAE);\n            //PrintJCasInfo(j);\n            //System.out.println(getXml(j));\n            jmongo.InsertJcasXml(getXml(rjs.getJcas()),rjs.getRede());\n            i++;\n            //break;\n        }\n\n\n\n\n    }\n\n\n    /***\n     * Dank des Pipelines wird jede CAS Obeckt dem Xml-String serialisiert.\n     * @param jCas\n     * @return\n     */\n    public static String getXml(JCas jCas){\n        CAS cas = jCas.getCas();\n        ByteArrayOutputStream outTmp = new ByteArrayOutputStream();\n        try {\n            XCASSerializer.serialize(cas, outTmp);\n        } catch (IOException |SAXException e) {\n            e.printStackTrace();\n        }\n        String xml = outTmp.toString();\n        return xml;\n\n    }\n\n    /***\n     * die Methode JCAS wird toCas Methode erweitert.\n     * Hier erstellen wir also der Text aus Redetext aus der Databank.\n     * @param text\n     * @return\n     * @throws UIMAException\n     */\n    public static JCas toCas(String text) throws UIMAException{\n        return JCasFactory.createText(text, \"de\");\n    }\n\n    /***\n     * Diese Methode erstellt aus der JCas Object Sentence, Tokens, NameEntity und Sentiment.\n     * @param jCas\n     */\n    public static void PrintJCasInfo(JCas jCas) {\n        Collection<Sentence> sentences = JCasUtil.select(jCas, Sentence.class);\n\n        for (Sentence sentence: sentences) {\n            System.out.println(\"Sentence :\" + sentence.getCoveredText());\n\n            Collection<Token> tokens = JCasUtil.selectCovered(Token.class, sentence);\n\n            for(Token token : JCasUtil.select(jCas, Token.class)) {\n                System.out.println(\"Tokens : \" + token.getCoveredText());\n                System.out.println(token.getPosValue());\n            }\n\n            for(NamedEntity entity : JCasUtil.select(jCas, NamedEntity.class)) {\n                System.out.println(\"Entity:  \"+ entity.getCoveredText()+ \" Value : \"+ entity.getValue());\n                if(entity.getValue().equals(\"PER\")) {\n                    System.out.println(\"Person\" + entity.getCoveredText() );\n                }\n                else {\n                    System.out.println(\"Location : \"+ entity.getCoveredText());\n                }\n            }\n        }\n        for(Sentence sentence : JCasUtil.select(jCas, Sentence.class)) {\n            System.out.println(sentence.getCoveredText());\n            for (Sentiment sentiment :  JCasUtil.selectCovered(Sentiment.class, sentence)) {\n                System.out.println(\"Sentiment : \"+ sentiment.getSentiment());\n            }\n        }\n\n    }\n\n\n\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Main.java b/src/main/java/Main.java
--- a/src/main/java/Main.java	(revision cadcda9489823b39d0be74c1318da6cd10ecdba8)
+++ b/src/main/java/Main.java	(date 1639680001296)
@@ -304,7 +304,7 @@
                     }
                 }
 
-                System.out.println("+++++++++++++++++++++++++++++++++++++++++++");
+                System.out.println("++++++++++++++++++++++++++++++++++++++++++++");
             }
         }
 
